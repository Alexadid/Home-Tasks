1. Про типы отношений между классами.

А) Ассоциация

Двунаправленная связь между классами - A знает о B, B знает об A (пример с семинара: задача про продукты и покупателей)... Классы в ассоциации могут существовать независимо друг от друга.

Б) Агрегация

Агрегация представляет собой отношение целое-часть. Это, в свою очередь, подразумевает, что один класс (целое) содержит другие классы (части) или состоит из них. Части могут существовать независимо от целого.

В) Композиция

Композиция - это более сильная форма агрегации. Представляет собой строгое соотношение целого и части, при котором части не могут существовать без целого. Когда разрушается целое, разрушаются и части.

Г) Зависимость

Отношение, при котором один класс полагается на другой класс для некоторого функционала, но они не тесно связаны. Обычно это происходит, когда один класс использует другой класс в качестве параметра или временного объекта внутри метода.

Д) 'Является'

Это связь между классами, при которой один класс (дочерний или подкласс) наследует атрибуты и поведение от другого класса (родительского).

2. Разновидности наследования

А) Единичное наследование

Единичное наследование относится к классу, наследующему свойства и поведение от одного базового класса. Это простейшая форма наследования, которая используется для моделирования отношения 'является', где производный класс является специализированной версией базового класса.

Пример: class Dog : public Animal { ... }

Б) Множественное наследование

Возникает, когда класс наследуется от более чем одного базового класса. Это позволяет классу комбинировать атрибуты и поведение нескольких классов, что может быть полезно для моделирования сложных взаимосвязей или общих функциональных возможностей.

Пример: class Manager : public Employee, public ProjectManager { ... };

В) Многоуровневое наследование

Многоуровневое наследование включает в себя цепочку наследования, где класс является производным от другого производного класса. Он используется для создания иерархии классов с возрастающей специализацией.

Пример: class Grandparent { ... };
	class Parent : public Grandparent { ... };
	class Child : public Parent { ... }

Г) Иерархическое наследование

Иерархическое наследование возникает, когда несколько производных классов наследуются от одного базового класса. Используется, когда несколько классов имеют общие атрибуты и поведение, но также имеют свои специализированные характеристики.

Пример: class Shape { ... };
	class Circle : public Shape { ... };
	class Rectangle : public Shape { ... };

Д) Гибридный (виртуальный) наследование

Гибридное наследование объединяет несколько типов наследования в одной программе. Это часто предполагает использование виртуальных базовых классов, чтобы избежать двусмысленности в случаях множественного наследования (алмаз смерти).

Пример: сложные иерархии классов как с одиночным, так и с множественным наследованием.

Если говорить про синтаксис наследования, то перед нами 3 опции:
	- public-наследование: все спецификаторы доступа сохраняются;
	- private-наследование: все спецификаторы становятся private;
	- protected-наследование: все поля становятся private, кроме protected - остаётся protected.

3. Корректность функционирования механизма виртуальных функций

Если мы говорим сугубо про возможность функционирования механизма, а не возможность его функционирования в иерархии, то необходимо полное совпадение сигнатур функций.

4. Необходимость виртуальных базовых классов при множественном наследовании

Виртуальные базовые классы используются для решения проблемы 'алмаза смерти', возникающей при использовании множественного наследования. Данная проблема возникает, когда класс наследуется от двух или более классов, имеющих общий базовый класс. Это может привести к двусмысленности и конфликтам в иерархии наследования. Виртуальные базовые классы обеспечивают решение этой проблемы, гарантируя, что только один экземпляр общего базового класса является общим для всех производных классов.

5. Основные категории паттернов проектирования

А) Порождающие паттерны

Паттерны, позволяющие создавать объекты, абстрагируя этот процесса настолько, что полученная система будет не зависима от процесса создания или способа представления объектов.

Б) Структурные паттерны

Паттерны, чьей целью является компоновка системы на основе классов и объектов.

В) Поведенческие паттерны

Паттерны, которые отвечают за взаимодействие различных объектов и классов между собой.

Дополнительно.
Вопрос 4 из задания 5: Разница внутреннего и внешнего связывания.

Внутреннее связывание относится к видимости и доступности переменной или функции в рамках одной единицы трансляции (обычно исходного файла и файлов, которые он включает или на которые ссылается). Внешнее связывание, с другой стороны, позволяет получать доступ к переменным и функциям из нескольких единиц трансляции, как правило, через заголовочные файлы. Именно в том, откуда к сущности можно обратиться и заключается разница между типами связывания.