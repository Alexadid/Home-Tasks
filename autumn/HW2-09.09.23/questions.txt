1. Сегменты структуры памяти процесса

Stack: Стек используется для управления локальными переменными и вызовами функций. Каждый раз, когда вызывается функция, создается новый фрейм стека для хранения локальных переменных функции и управляющей информации. Когда функция завершает работу, ее фрейм стека уничтожается.

Heap: Куча используется для динамического выделения памяти. Это пул памяти, из которого можно запрашивать блоки памяти по мере необходимости во время выполнения, используя такие функции, как new. Служит для управления данными с более длительным сроком существования или динамических структур данных (динамические массивы и подобные).

Static (или сегмент данных): Он включает в себя не только сам код, но и глобальные и статические переменные. В этом сегменте хранятся статические и глобальные переменные, которые имеют фиксированное место в памяти на протяжении всего срока службы программы.

Сегмент BSS: Сегмент BSS (Block Started by Symbol - блок, начинающийся с символа) является частью сегмента данных и используется для неинициализированных глобальных и статических переменных. Другими словами, это память, выделенная для переменных, которые инициализированы равным нулю или неинициализированы явно.

Сегмент постоянных данных (зависит от компилятора и архитектуры целевой системы): В некоторых системах может существовать отдельный сегмент для хранения постоянных данных, таких как строковые литералы и постоянные переменные. Этот сегмент обычно доступен только для чтения (аналогично Static).

2. Связь массивов и указателей

Связь массивов и указателей заключается в том, что массивы могут быть сведены к указателю при использовании без индекса. Это означает, что когда используется имя массива, оно может рассматриваться как указатель на его же первый элемент, пример:

int arr[5] = {1, 2, 3, 4, 5};
int* ptr = arr; // 'arr' низводится до указателя на первый элемент
int* ptr = arr + 1; // получаем указатель на второй элемент

3. Небезопасность низкоуровневой работы с памятью

Низкоуровневая работа с памятью может быть опасна по многим причинам, включая утечки памяти (часть оперативной памяти остаётся недоступной даже после завершения работы программы) и переполнение стека (запись кода за пределами выделенного объёма). Последнее может вести к повреждению данных в памяти устройства и потенциально открывать лазейки для извлечения обычно недоступных участков памяти или исполнению вредоносных программ.

4. Ссылки и указатели

Если упрощать, то ссылка - это безопасный аналог указателя. Ссылка не может быть null или неинициализированной. На протяжении своего существования ссылка не может быть изменена. Кроме того, в её случае нет необходимости обращать на разыменование.

5. Способы передачи данных в функцию

Можно разбить способы передачи на две группы: с копированием и без. Первый тип - это обычная передача переменной в функцию, пример: func(var). В функции создаётся копия исходной переменной, работа ведётся именно с ней. Второй тип подразумевает использование указателей или ссылок. Этот метод эффективнее в отношении объёма памяти, который используется процессом. Тем не менее, использование встроенных указателей может приводить к утечкам памяти или ошибкам, в отличие от ссылок.