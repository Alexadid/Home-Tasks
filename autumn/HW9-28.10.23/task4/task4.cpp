#include <iostream>
#include "include/Employee.hpp"



std::string evaluate_salary_and_return_name (Employee e)
{
    if (e.title() == "CEO" || e.salary() > 100000)
    {
        std::cout << e.name() << " " << e.surname() << " is overpaid.\n";
    }
    else
    {
        std::cout << e.name() << " is not overpaid.\n";
    }
    return e.name() + " " + e.surname();
}

// Начнём с путей нормального выполнения:
// 1) если должность сотрудника - "CEO" или его зарплата превышает 100000, то выводится сообщение, что ему переплачивают;
// 2) если ни одно из условий не выполняется, выводится сообщение о том, что сотруднику не переплачивают;
// ---> в обоих случаях функция вернёт имя и фамилию сотрудника

// Пути выполнения с исключениями (или сюрпризами):
// строка 8:
// 3) title() не возвращает std::string, но оператор '==' не перегружен для такого сравнения
// 4) оператор '==' перегружен как-то странно, например возвращает неожиданный int или double, или пользовательский тип,
// то функция 'сработает', но каким будет результат предсказать невозможно
// 5) опертор '==' выбрасывает исключение, которую мы не обрабатываем
// 6) так же, как и с предыдущим оператором, оператор '>' может быть перегружен, так что функция выполнится, но результат непредсказуем
// 7) оператор '>' выбрасывает исключение, которую не обрабатываем
// 8) один или оба логических оператора перегружены и вернули типы, для которых перегружен оператор '||': выброшено исключние
// 9) один или оба логических оператора перегружены и вернули типы, для которых перегружен оператор '||': неожинный результат выполнения оператора
// 10) 9) один или оба логических оператора перегружены и вернули типы, для которых перегружен оператор '||': оператор не перегружен для сравнения таких типов
// строка 10:
// 11) name() выбрасывает исключение
// 12) name() возвращает ползоватльеский тип, для которого перегружен оператор '<<', тот выбрасывает исключение
// 13) перегруженный оператор '<<' не возвращает поток вывода
// 14) surname() выбрасывает исключение
// 15) surname() возвращает ползоватльеский тип, для которого перегружен оператор '<<', тот выбрасывает исключение
// 16) перегруженный оператор '<<' для пользовательского типа, исполльзуемого в surname(), не возвращает поток вывода
// строка 14:
// 17) name() выбрасывает исключение
// строка 16:
// 18) name() возвращет неожиданный тип -> неожиданный результат выполнения программы
// 19) аналогично для surname()







