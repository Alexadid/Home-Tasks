import pandas as pd
import matplotlib.pyplot as plt



# Загружаем данные из CSV файла в DataFrame
data = pd.read_csv('thread_timing_data.csv')

# Построение самого графика
plt.figure(figsize=(10, 6))
plt.plot(data['Threads'], data['Time(ns)'], marker='o')
plt.title('Зависимость времени исполнения parallel_accumulate от количества задействованных потоков')
plt.xlabel('Количество потоков')
plt.ylabel('Время исполнения (нс)')
plt.grid(True)
plt.xticks(data['Threads']) 
plt.show()

# Для большее общности измерения были проведены на ноутбуке и компьютере,
# что видно по разному количеству поотков, связанному с разным числом ядер процессоров.

# В случае 8-ядерного процессора ноутбука, можно сказать, что оптимальным числом потоков будет 4,
# так как большее их число приводит к крайне незначительному уменьшению времени работы программы.
# В случае 24-ядерного процессора оптимальным числом задействованных потоков бед 7 по тем же причинам.

# Если обобщить, то можно сказать, что полученные графики хорошо иллюстрируют закон Амдала.
# Этот закон гласит, что ускорение работы программы, использующей несколько процессоров при параллельных вычислениях,
# ограничено последовательной частью программы. Если в задаче есть какие-либо последовательные части
# или если параллельные части не масштабируются идеально, ускорение достигнет предела. Что мы и наблюдаем на всех графиках.