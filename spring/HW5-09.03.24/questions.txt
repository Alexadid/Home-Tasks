1. Организация иерархии классов библиотеки iostream

Верхушкой айсберга является ios_base, предоставляющий фундаментальные возможности ввода-вывода, которые расширяются в ios (включая управление буфером и состоянием потока). Производные от ios классы istream и ostream обрабатывают потоки ввода и вывода символов соответственно, причем iostream выполняет обе роли для двунаправленных операций ввода-вывода, являясь наследником обоих. Что касается файловых операций, классы ifstream, ofstream и fstream специализированы для операций ввода, вывода и двунаправленных операций соответственно. Аналогично, строковыми операциями управляют istringstream, ostringstream, stringstream.

2. Состояния потоков в basic_ios

В порядке логики и изложения на семинаре:

а) goodbit: указывает на то, что все операции ввода-вывода завершились успешно и поток готов к дальнейшим операциям - ошибок не произошло;

б) eofbit: указывает на то, что операция ввода достигла конца файла;

в) failbit: указывает на то, что операции ввода не удается прочитать ожидаемые данные или операции вывода не удается записать данные;

г) badbit: указывает на то, что произошла серьезная ошибку, которая обычно означает потерю целостности потока;

3. Преимущества и недостатки буферизированных потоков

Буферизованные потоки повышают производительность за счёт сокращения количества операций чтения/записи на физическое устройство, поскольку данные временно хранятся в памяти. Этот механизм приводит к более быстрой обработке данных и меньшему количеству системных вызовов. Кроме того, несомненным преимуществом является предоставление большего контроля над потоком, позволяя выполнять операции, такие как пакетная обработка или отложенный сброс данных на устройство.

Тем не менее, буферизованные потоки могут увеличить использование памяти из-за необходимости в дополнительном пространстве для буфера. Они могут привести к задержкам в обработке данных, что может быть проблематично для приложений, требующих немедленной обратной связи. Обработка ошибок становится более сложной, поскольку ошибки могут быть обнаружены не сразу при буферизации данных. Кроме того, существует риск потери данных в случае сбоя программы или если буфер не будет должным образом очищен перед закрытием потока.

4. Разница между манипуляторами и флагами форматирования

Манипуляторы - это вызовы функций, которые изменяют форматирование потока только для следующей операции. Флаги форматирования, с другой стороны, изменяют состояние потока более постоянно, пока оно явно не изменено, влияя на все последующие операции.

5. Преимущество такой абстракции как потоки ввода-вывода

Абстракция потоков ввода-вывода в C++ дает значительные преимущества, включая независимость от устройств, что позволяет коду единообразно взаимодействовать с различными источниками данных (файлы, консоль); расширяемость, позволяющая настраивать или расширять функциональность потока в соответствии с конкретными потребностями; интегрированную обработку ошибок с помощью флагов состояния. Кроме того, автоматическая буферизация повышает производительность за счёт уменьшения необходимости в частых прямых взаимодействиях с устройствами.